apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.
  uid: 75e82b6c-f02d-45c3-98a3-fedde86e40bf
spec:
  groupPriorityMinimum: 18000
  version: v1
  versionPriority: 1
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.admissionregistration.k8s.io
  uid: 82c15507-8eb1-4069-a309-0afaa0adad51
spec:
  group: admissionregistration.k8s.io
  groupPriorityMinimum: 16700
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.apiextensions.k8s.io
  uid: 68d39184-ab7c-4475-ac04-ee3f10fb6099
spec:
  group: apiextensions.k8s.io
  groupPriorityMinimum: 16700
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.apps
  uid: ee9b6101-9be4-44ca-88e8-df8a48eb7716
spec:
  group: apps
  groupPriorityMinimum: 17800
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.authentication.k8s.io
  uid: 34dbf1d7-b69b-4bba-bf9e-8c0efd6531a5
spec:
  group: authentication.k8s.io
  groupPriorityMinimum: 17700
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.authorization.k8s.io
  uid: 9c887d77-7658-423e-8b0d-611b45077fc5
spec:
  group: authorization.k8s.io
  groupPriorityMinimum: 17600
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.autoscaling
  uid: c1a89cf4-5d30-476e-87b0-57d9d3e41100
spec:
  group: autoscaling
  groupPriorityMinimum: 17500
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.batch
  uid: 4b4a1f03-0dd3-4db5-9723-8424c0ffcdde
spec:
  group: batch
  groupPriorityMinimum: 17400
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.certificates.k8s.io
  uid: 11b87611-0eb5-4cd5-9f47-702095c16703
spec:
  group: certificates.k8s.io
  groupPriorityMinimum: 17300
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.coordination.k8s.io
  uid: 7a54a3e7-b5f5-454c-ab45-65fb44f61dc7
spec:
  group: coordination.k8s.io
  groupPriorityMinimum: 16500
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.discovery.k8s.io
  uid: b54d2fb6-79fd-4ae2-ad77-ec61c1f15298
spec:
  group: discovery.k8s.io
  groupPriorityMinimum: 16200
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.events.k8s.io
  uid: 9fbdab32-f4b2-4ba1-959c-30e46b73b7f1
spec:
  group: events.k8s.io
  groupPriorityMinimum: 17750
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.flowcontrol.apiserver.k8s.io
  uid: 9b933457-f1d8-4a28-ab29-8dc1c8ad6dca
spec:
  group: flowcontrol.apiserver.k8s.io
  groupPriorityMinimum: 16100
  version: v1
  versionPriority: 21
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.networking.k8s.io
  uid: 4e9585dd-ad9a-4f02-98de-95fb2bebd189
spec:
  group: networking.k8s.io
  groupPriorityMinimum: 17200
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.node.k8s.io
  uid: e47c611f-98ff-48a2-b7ac-2303515379d1
spec:
  group: node.k8s.io
  groupPriorityMinimum: 16300
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.policy
  uid: adae764a-a182-4366-86c0-db4f8b27ee70
spec:
  group: policy
  groupPriorityMinimum: 17100
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.rbac.authorization.k8s.io
  uid: f6729eaf-facc-420f-a433-61093b0f55fe
spec:
  group: rbac.authorization.k8s.io
  groupPriorityMinimum: 17000
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.scheduling.k8s.io
  uid: dd1b34f0-f1b5-4574-a94f-10b78b4eb07e
spec:
  group: scheduling.k8s.io
  groupPriorityMinimum: 16600
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1.storage.k8s.io
  uid: b3a6c118-bc67-4317-a4d5-fbb6d31cc602
spec:
  group: storage.k8s.io
  groupPriorityMinimum: 16800
  version: v1
  versionPriority: 15
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v1beta3.flowcontrol.apiserver.k8s.io
  uid: a80fb8dc-e3d6-4fe8-9c13-d8f5938885a6
spec:
  group: flowcontrol.apiserver.k8s.io
  groupPriorityMinimum: 16100
  version: v1beta3
  versionPriority: 18
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kube-aggregator.kubernetes.io/automanaged: onstart
  managedFields:
  - apiVersion: apiregistration.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kube-aggregator.kubernetes.io/automanaged: {}
      f:spec:
        f:group: {}
        f:groupPriorityMinimum: {}
        f:version: {}
        f:versionPriority: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: v2.autoscaling
  uid: 07ca368a-8670-496b-8ea2-ef54c27fb8e3
spec:
  group: autoscaling
  groupPriorityMinimum: 17500
  version: v2
  versionPriority: 30
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: Local APIServices are always available
    reason: Local
    status: "True"
    type: Available
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: cluster-admin
  uid: 415a1590-3925-415c-965b-0176f75e8bbe
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:masters
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:basic-user
  uid: 5ceb5554-de01-4b13-bcc1-96d1dee1925e
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:basic-user
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:attachdetach-controller
  uid: 27702bf1-edb9-4aa1-9271-cac8f5bab991
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:attachdetach-controller
subjects:
- kind: ServiceAccount
  name: attachdetach-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:certificate-controller
  uid: becd6386-7f23-4e4c-89ba-32014f735580
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:certificate-controller
subjects:
- kind: ServiceAccount
  name: certificate-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:clusterrole-aggregation-controller
  uid: cfc07294-f1fe-462e-b4a7-5b8cc0bf2a0f
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:clusterrole-aggregation-controller
subjects:
- kind: ServiceAccount
  name: clusterrole-aggregation-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:cronjob-controller
  uid: e47861c2-9d0a-4dea-b972-e49484f1634e
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:cronjob-controller
subjects:
- kind: ServiceAccount
  name: cronjob-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:daemon-set-controller
  uid: 6c55a818-47bf-4362-8435-643c9131e558
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:daemon-set-controller
subjects:
- kind: ServiceAccount
  name: daemon-set-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:deployment-controller
  uid: 453cfd58-7b3c-4ab5-a1a9-a4d4edb015d7
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:deployment-controller
subjects:
- kind: ServiceAccount
  name: deployment-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:disruption-controller
  uid: 8228ac48-5381-41c8-bcb5-ae9137d4a9e7
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:disruption-controller
subjects:
- kind: ServiceAccount
  name: disruption-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:endpoint-controller
  uid: a1995020-4dfa-4a0b-bc4d-311154c783dc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:endpoint-controller
subjects:
- kind: ServiceAccount
  name: endpoint-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:endpointslice-controller
  uid: f25257e2-b138-47d3-a07b-2757567d330b
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:endpointslice-controller
subjects:
- kind: ServiceAccount
  name: endpointslice-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:endpointslicemirroring-controller
  uid: 5fa5f4ee-6817-4376-997d-bf4b76ca4c1a
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:endpointslicemirroring-controller
subjects:
- kind: ServiceAccount
  name: endpointslicemirroring-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:ephemeral-volume-controller
  uid: af196dc2-12a8-4714-bda6-fda01a2ce719
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:ephemeral-volume-controller
subjects:
- kind: ServiceAccount
  name: ephemeral-volume-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:expand-controller
  uid: 5c32e229-400c-4544-938b-8051d41bba66
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:expand-controller
subjects:
- kind: ServiceAccount
  name: expand-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:generic-garbage-collector
  uid: 01e9e2a7-d2b7-47f4-adfb-3f1ae4da6d51
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:generic-garbage-collector
subjects:
- kind: ServiceAccount
  name: generic-garbage-collector
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:horizontal-pod-autoscaler
  uid: 0ea4d548-25bf-4576-8b4f-d57cfaa6beba
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:horizontal-pod-autoscaler
subjects:
- kind: ServiceAccount
  name: horizontal-pod-autoscaler
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:job-controller
  uid: a0824a17-4898-4ebd-a0e8-06ff8ba7afb8
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:job-controller
subjects:
- kind: ServiceAccount
  name: job-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:legacy-service-account-token-cleaner
  uid: 5271b77a-6d58-4ca5-a301-cac7ad0d941b
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:legacy-service-account-token-cleaner
subjects:
- kind: ServiceAccount
  name: legacy-service-account-token-cleaner
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:namespace-controller
  uid: 97f2f5ad-74aa-445a-b323-72c9ad24bf0a
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:namespace-controller
subjects:
- kind: ServiceAccount
  name: namespace-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:node-controller
  uid: 4ac988e2-1af3-443d-9918-9f0f6134b7a3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:node-controller
subjects:
- kind: ServiceAccount
  name: node-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:persistent-volume-binder
  uid: 306c0c16-d897-4fd6-b154-eb4f3aa047b3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:persistent-volume-binder
subjects:
- kind: ServiceAccount
  name: persistent-volume-binder
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:pod-garbage-collector
  uid: faa73612-7f8b-4a81-80e9-41f9f6db2898
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:pod-garbage-collector
subjects:
- kind: ServiceAccount
  name: pod-garbage-collector
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:pv-protection-controller
  uid: 5d65585e-c7e9-4388-a3a1-c7e96413caec
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:pv-protection-controller
subjects:
- kind: ServiceAccount
  name: pv-protection-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:pvc-protection-controller
  uid: e89cd1d6-91bf-42fa-b974-70ab94f93312
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:pvc-protection-controller
subjects:
- kind: ServiceAccount
  name: pvc-protection-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:replicaset-controller
  uid: f73bb3ce-9a90-4159-9a87-38c253542010
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:replicaset-controller
subjects:
- kind: ServiceAccount
  name: replicaset-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:replication-controller
  uid: c1b40757-f630-4e46-aabf-cfa6f8497596
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:replication-controller
subjects:
- kind: ServiceAccount
  name: replication-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:resourcequota-controller
  uid: eb4ca105-5afc-4054-bdc0-290998466633
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:resourcequota-controller
subjects:
- kind: ServiceAccount
  name: resourcequota-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:root-ca-cert-publisher
  uid: 6a66cda8-05de-4307-8ae1-a27f9df219c9
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:root-ca-cert-publisher
subjects:
- kind: ServiceAccount
  name: root-ca-cert-publisher
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:route-controller
  uid: be095a6b-9aa3-4f2a-9c3c-211df0d393a4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:route-controller
subjects:
- kind: ServiceAccount
  name: route-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:service-account-controller
  uid: e455711b-1ea6-40d7-82dd-d8b8333a153f
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:service-account-controller
subjects:
- kind: ServiceAccount
  name: service-account-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:service-controller
  uid: f25591c2-761c-43d3-bb64-b9dc655c921d
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:service-controller
subjects:
- kind: ServiceAccount
  name: service-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:statefulset-controller
  uid: b68ff51d-83e4-4d0c-b77d-c32749781a61
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:statefulset-controller
subjects:
- kind: ServiceAccount
  name: statefulset-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:ttl-after-finished-controller
  uid: b39e7047-ce7a-4df9-abb9-86028aca12c6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:ttl-after-finished-controller
subjects:
- kind: ServiceAccount
  name: ttl-after-finished-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:ttl-controller
  uid: 9ddb6277-5727-4724-b264-358bd3540cb6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:ttl-controller
subjects:
- kind: ServiceAccount
  name: ttl-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:discovery
  uid: 54193d87-350e-4e02-bccc-781a1d913fa0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:discovery
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-controller-manager
  uid: 8deff683-24e1-416f-8471-7da6901a0d07
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-controller-manager
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-controller-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-dns
  uid: 018c8e32-20a3-4961-88b4-f12c94cbba9a
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-dns
subjects:
- kind: ServiceAccount
  name: kube-dns
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-scheduler
  uid: 38ea70f5-74d4-4dbd-a851-79f3c9b8296c
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-scheduler
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-scheduler
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:monitoring
  uid: e101b2e6-667d-4509-9463-28dbc70baceb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:monitoring
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:node
  uid: 45e0347c-9391-4209-a30e-f999d3de3419
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:node
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:node-proxier
  uid: 44877dad-f2a1-40c0-a409-ce512bdf9a0b
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:node-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-proxy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:public-info-viewer
  uid: 58f1d09d-86d7-4b8a-9888-13c0b261afbc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:public-info-viewer
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:unauthenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:service-account-issuer-discovery
  uid: fa0734dd-336b-4885-9d2b-5401f2239e42
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:service-account-issuer-discovery
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:volume-scheduler
  uid: 5115083a-6183-4b26-be54-c57cbcb0c25e
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:volume-scheduler
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-scheduler
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:rules: {}
    manager: clusterrole-aggregation-controller
    operation: Apply
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:aggregationRule:
        .: {}
        f:clusterRoleSelectors: {}
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: admin
  uid: 5a4ece5b-a6a0-4483-9205-a3d72a18a3dd
rules:
- apiGroups:
  - ""
  resources:
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  - secrets
  - services/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - impersonate
- apiGroups:
  - ""
  resources:
  - pods
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods/eviction
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - persistentvolumeclaims
  - replicationcontrollers
  - replicationcontrollers/scale
  - secrets
  - serviceaccounts
  - services
  - services/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - replicasets
  - replicasets/scale
  - statefulsets
  - statefulsets/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - ingresses
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicationcontrollers/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - networkpolicies
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - persistentvolumeclaims
  - persistentvolumeclaims/status
  - pods
  - replicationcontrollers
  - replicationcontrollers/scale
  - serviceaccounts
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - events
  - limitranges
  - namespaces/status
  - pods/log
  - pods/status
  - replicationcontrollers/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - replicasets
  - replicasets/scale
  - replicasets/status
  - statefulsets
  - statefulsets/scale
  - statefulsets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  - horizontalpodautoscalers/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - cronjobs/status
  - jobs
  - jobs/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - ingresses
  - ingresses/status
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicasets/status
  - replicationcontrollers/scale
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  - poddisruptionbudgets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - localsubjectaccessreviews
  verbs:
  - create
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: cluster-admin
  uid: 995ae97e-fdac-41fd-b7d6-bfe17cf918cf
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:rules: {}
    manager: clusterrole-aggregation-controller
    operation: Apply
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:aggregationRule:
        .: {}
        f:clusterRoleSelectors: {}
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
          f:rbac.authorization.k8s.io/aggregate-to-admin: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: edit
  uid: 10f6cf43-7e01-408a-afea-992e3fa185fc
rules:
- apiGroups:
  - ""
  resources:
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  - secrets
  - services/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - impersonate
- apiGroups:
  - ""
  resources:
  - pods
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods/eviction
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - persistentvolumeclaims
  - replicationcontrollers
  - replicationcontrollers/scale
  - secrets
  - serviceaccounts
  - services
  - services/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - replicasets
  - replicasets/scale
  - statefulsets
  - statefulsets/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - ingresses
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicationcontrollers/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - networkpolicies
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - persistentvolumeclaims
  - persistentvolumeclaims/status
  - pods
  - replicationcontrollers
  - replicationcontrollers/scale
  - serviceaccounts
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - events
  - limitranges
  - namespaces/status
  - pods/log
  - pods/status
  - replicationcontrollers/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - replicasets
  - replicasets/scale
  - replicasets/status
  - statefulsets
  - statefulsets/scale
  - statefulsets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  - horizontalpodautoscalers/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - cronjobs/status
  - jobs
  - jobs/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - ingresses
  - ingresses/status
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicasets/status
  - replicationcontrollers/scale
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  - poddisruptionbudgets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - networkpolicies
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
          f:rbac.authorization.k8s.io/aggregate-to-admin: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:aggregate-to-admin
  uid: c3ee5d0b-081e-4626-b99a-069c10ae89b1
rules:
- apiGroups:
  - authorization.k8s.io
  resources:
  - localsubjectaccessreviews
  verbs:
  - create
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
          f:rbac.authorization.k8s.io/aggregate-to-edit: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:aggregate-to-edit
  uid: aefee0af-0de2-4563-9435-582105ee76bb
rules:
- apiGroups:
  - ""
  resources:
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  - secrets
  - services/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - impersonate
- apiGroups:
  - ""
  resources:
  - pods
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods/eviction
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - persistentvolumeclaims
  - replicationcontrollers
  - replicationcontrollers/scale
  - secrets
  - serviceaccounts
  - services
  - services/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - replicasets
  - replicasets/scale
  - statefulsets
  - statefulsets/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - ingresses
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicationcontrollers/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - networkpolicies
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
          f:rbac.authorization.k8s.io/aggregate-to-view: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:aggregate-to-view
  uid: 6d4e5573-37ce-43f3-b4b4-510c557600f4
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - persistentvolumeclaims
  - persistentvolumeclaims/status
  - pods
  - replicationcontrollers
  - replicationcontrollers/scale
  - serviceaccounts
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - events
  - limitranges
  - namespaces/status
  - pods/log
  - pods/status
  - replicationcontrollers/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - replicasets
  - replicasets/scale
  - replicasets/status
  - statefulsets
  - statefulsets/scale
  - statefulsets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  - horizontalpodautoscalers/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - cronjobs/status
  - jobs
  - jobs/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - ingresses
  - ingresses/status
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicasets/status
  - replicationcontrollers/scale
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  - poddisruptionbudgets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - networkpolicies
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:auth-delegator
  uid: d973a80b-372f-46db-ae58-093e3772feb4
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:basic-user
  uid: a49e296f-4c53-4cb1-9817-65d463db79f5
rules:
- apiGroups:
  - authorization.k8s.io
  resources:
  - selfsubjectaccessreviews
  - selfsubjectrulesreviews
  verbs:
  - create
- apiGroups:
  - authentication.k8s.io
  resources:
  - selfsubjectreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
  uid: f83117ce-64a3-4d91-a546-7491766ae9f2
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/nodeclient
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
  uid: 451425fe-a511-48b4-8cc6-d17eb7975a40
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/selfnodeclient
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:certificates.k8s.io:kube-apiserver-client-approver
  uid: 0e442439-13b8-49a1-91c6-e2827be28384
rules:
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kube-apiserver-client
  resources:
  - signers
  verbs:
  - approve
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:certificates.k8s.io:kube-apiserver-client-kubelet-approver
  uid: a765dd83-0233-4225-b132-17aaae059f2a
rules:
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kube-apiserver-client-kubelet
  resources:
  - signers
  verbs:
  - approve
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:certificates.k8s.io:kubelet-serving-approver
  uid: e75e5b55-67fb-4e7c-805c-a5d48dc70489
rules:
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kubelet-serving
  resources:
  - signers
  verbs:
  - approve
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:certificates.k8s.io:legacy-unknown-approver
  uid: 149e0510-466d-44b4-8afa-b9f640508043
rules:
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/legacy-unknown
  resources:
  - signers
  verbs:
  - approve
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:attachdetach-controller
  uid: 77db8f80-193f-47d0-ab4e-2b052b441c06
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  - persistentvolumes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - volumeattachments
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - csidrivers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - csinodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:certificate-controller
  uid: 26333b56-cee1-4080-bb32-174550533a80
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  - certificatesigningrequests/status
  verbs:
  - update
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kube-apiserver-client-kubelet
  resources:
  - signers
  verbs:
  - approve
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kube-apiserver-client
  - kubernetes.io/kube-apiserver-client-kubelet
  - kubernetes.io/kubelet-serving
  - kubernetes.io/legacy-unknown
  resources:
  - signers
  verbs:
  - sign
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:clusterrole-aggregation-controller
  uid: 428e8152-85c5-477b-9cd5-66cab6cd0bc8
rules:
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - escalate
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:cronjob-controller
  uid: 85e08a47-3f39-45db-9134-577842856d97
rules:
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs/status
  verbs:
  - update
- apiGroups:
  - batch
  resources:
  - cronjobs/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - list
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:daemon-set-controller
  uid: 6b5b3cfc-2ede-475c-87f8-264f4c8d3e31
rules:
- apiGroups:
  - apps
  - extensions
  resources:
  - daemonsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - daemonsets/status
  verbs:
  - update
- apiGroups:
  - apps
  - extensions
  resources:
  - daemonsets/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - pods/binding
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:deployment-controller
  uid: a78e3862-af9d-4d98-9b0c-00c78e9cfa9f
rules:
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments/status
  verbs:
  - update
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments/finalizers
  verbs:
  - update
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:disruption-controller
  uid: 4017c379-e1cf-448a-ae62-193c205252f0
rules:
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - replicationcontrollers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets/status
  verbs:
  - update
- apiGroups:
  - '*'
  resources:
  - '*/scale'
  verbs:
  - get
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:endpoint-controller
  uid: 681ad7cb-a6e6-4a0f-9e21-182fc40eb4e6
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - update
- apiGroups:
  - ""
  resources:
  - endpoints/restricted
  verbs:
  - create
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:endpointslice-controller
  uid: 8efb9579-fb8e-4ef3-88ba-0be32da478e5
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs:
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - create
  - delete
  - get
  - list
  - update
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:endpointslicemirroring-controller
  uid: f4dd165d-7f1a-452e-92dc-def80b982a6d
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - endpoints/finalizers
  verbs:
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - create
  - delete
  - get
  - list
  - update
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:ephemeral-volume-controller
  uid: e332ef37-5a93-4088-af32-56ded3f158cc
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:expand-controller
  uid: 7eec6989-19a5-4785-912d-bf0335bc90be
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:generic-garbage-collector
  uid: 1bb6fe95-6165-4425-929e-8099ca48c793
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:horizontal-pod-autoscaler
  uid: e6cb3346-0c6f-4304-a4f4-bdb41b1f8552
rules:
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers/status
  verbs:
  - update
- apiGroups:
  - '*'
  resources:
  - '*/scale'
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - list
- apiGroups:
  - custom.metrics.k8s.io
  resources:
  - '*'
  verbs:
  - get
  - list
- apiGroups:
  - external.metrics.k8s.io
  resources:
  - '*'
  verbs:
  - get
  - list
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:job-controller
  uid: d20680da-dbc4-4208-8c73-a4cce3968863
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs/status
  verbs:
  - update
- apiGroups:
  - batch
  resources:
  - jobs/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:legacy-service-account-token-cleaner
  uid: 79498abd-c3c2-4728-9c6e-62070643b2bd
rules:
- apiGroups:
  - ""
  resourceNames:
  - kube-apiserver-legacy-service-account-token-tracking
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - delete
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:namespace-controller
  uid: 6eb641f8-e082-4f57-a4ec-53e21b4e33ec
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces/finalize
  - namespaces/status
  verbs:
  - update
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - delete
  - deletecollection
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:node-controller
  uid: 94b8c075-a804-4746-94b4-8aec104eff18
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - delete
  - get
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - list
- apiGroups:
  - networking.k8s.io
  resources:
  - clustercidrs
  verbs:
  - create
  - get
  - list
  - update
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:persistent-volume-binder
  uid: a18ed86a-1b69-4f74-a6ec-fc940e72f4a8
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - update
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:pod-garbage-collector
  uid: a8376e93-a7ef-46dd-9571-7ec073d1d632
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:pv-protection-controller
  uid: 894c9883-cee4-43b1-be49-6e3f6f802ba5
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:pvc-protection-controller
  uid: 7ef8cd2b-3be5-4d8c-951e-1208b3614dd9
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:replicaset-controller
  uid: 9fd4a866-9464-43be-94a1-9d5f0ee0cb55
rules:
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets/status
  verbs:
  - update
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:replication-controller
  uid: 6716519b-c290-4f71-ba2b-75cc5d1bb8ca
rules:
- apiGroups:
  - ""
  resources:
  - replicationcontrollers
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - replicationcontrollers/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - replicationcontrollers/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:resourcequota-controller
  uid: 0760635f-f5b2-4a87-a600-76878af01c98
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - resourcequotas/status
  verbs:
  - update
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:root-ca-cert-publisher
  uid: 627cb103-0505-45d7-a2a2-52d2874dc6b7
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - update
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:route-controller
  uid: 13fd2961-f3b5-4bc9-a44f-db85763a753b
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:service-account-controller
  uid: 4451d0a4-ad46-4119-a702-93dd9747d962
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:service-controller
  uid: dd823ae5-98d4-4184-8cfa-70a3ccc8da0a
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:statefulset-controller
  uid: c37acf2e-4208-446c-b53d-7da8030d3923
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - update
- apiGroups:
  - apps
  resources:
  - statefulsets/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - get
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - delete
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:ttl-after-finished-controller
  uid: 30077bd8-b97f-4133-a87c-20b9361bf77b
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:ttl-controller
  uid: fa634287-c269-4717-a0b9-d810b94dc3fc
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:discovery
  uid: e9c4cef8-e69f-4248-9206-522f2cd997e3
rules:
- nonResourceURLs:
  - /api
  - /api/*
  - /apis
  - /apis/*
  - /healthz
  - /livez
  - /openapi
  - /openapi/*
  - /readyz
  - /version
  - /version/
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:heapster
  uid: 0949545a-ad53-4806-8e07-586a7c58a202
rules:
- apiGroups:
  - ""
  resources:
  - events
  - namespaces
  - nodes
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-aggregator
  uid: b2ab234f-656f-4237-b56b-864bcbdc9433
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-controller-manager
  uid: 67b3e2c6-4d92-4d30-b4ac-dba49560c18e
rules:
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - kube-controller-manager
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  - serviceaccounts
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  - secrets
  - serviceaccounts
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  - serviceaccounts
  verbs:
  - update
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-dns
  uid: cc65986c-387b-46c1-8b8e-005164a0c922
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kube-scheduler
  uid: 03e12c3a-f522-47e4-844a-4b0e60bbfb50
rules:
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - kube-scheduler
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - pods/binding
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - storage.k8s.io
  resources:
  - csinodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - csidrivers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - csistoragecapacities
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:kubelet-api-admin
  uid: 7ea2d6c7-0e01-41e9-a4ac-6d911be2c122
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - proxy
- apiGroups:
  - ""
  resources:
  - nodes/log
  - nodes/metrics
  - nodes/proxy
  - nodes/stats
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:monitoring
  uid: 9c6ce895-9e90-461f-9c10-a7f16ce8d3fa
rules:
- nonResourceURLs:
  - /healthz
  - /healthz/*
  - /livez
  - /livez/*
  - /metrics
  - /metrics/slis
  - /readyz
  - /readyz/*
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:node
  uid: 33bc04a7-20af-47aa-a520-62c201cb95d5
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - localsubjectaccessreviews
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods/eviction
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  - persistentvolumes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - volumeattachments
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - csidrivers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - csinodes
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - node.k8s.io
  resources:
  - runtimeclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:node-bootstrapper
  uid: 12d009c3-11c9-4461-9e0d-403122307ec7
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:node-problem-detector
  uid: 27711014-1975-402c-9b4f-31d9a02530a7
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:node-proxier
  uid: 4883454f-67a4-499c-9969-74d24b781823
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:persistent-volume-provisioner
  uid: 1a5467a7-7b8c-4f59-8504-40997d1e1c84
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:public-info-viewer
  uid: ce17fdd7-9547-4597-a51d-02a568047b24
rules:
- nonResourceURLs:
  - /healthz
  - /livez
  - /readyz
  - /version
  - /version/
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:service-account-issuer-discovery
  uid: 163d028d-fee9-4eeb-b60e-b23a52eb25d1
rules:
- nonResourceURLs:
  - /.well-known/openid-configuration
  - /.well-known/openid-configuration/
  - /openid/v1/jwks
  - /openid/v1/jwks/
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:volume-scheduler
  uid: ae3c1800-6c7c-4d29-bca4-1a62659eb969
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.k8s.io/aggregate-to-view: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:rules: {}
    manager: clusterrole-aggregation-controller
    operation: Apply
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:aggregationRule:
        .: {}
        f:clusterRoleSelectors: {}
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
          f:rbac.authorization.k8s.io/aggregate-to-edit: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: view
  uid: 4cc25382-70d8-4967-80ad-7dcaf84b9881
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - persistentvolumeclaims
  - persistentvolumeclaims/status
  - pods
  - replicationcontrollers
  - replicationcontrollers/scale
  - serviceaccounts
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - events
  - limitranges
  - namespaces/status
  - pods/log
  - pods/status
  - replicationcontrollers/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - replicasets
  - replicasets/scale
  - replicasets/status
  - statefulsets
  - statefulsets/scale
  - statefulsets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  - horizontalpodautoscalers/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - cronjobs/status
  - jobs
  - jobs/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - ingresses
  - ingresses/status
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicasets/status
  - replicationcontrollers/scale
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  - poddisruptionbudgets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - networkpolicies
  verbs:
  - get
  - list
  - watch
---
apiVersion: v1
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC4zCCAcugAwIBAgIBADANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwdrd29r
    LWNhMCAXDTI0MDUyMTIxNDAyN1oYDzIxMjQwNDI4MjE0MDI3WjASMRAwDgYDVQQD
    Ewdrd29rLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyTqS//Ik
    +z2dmN+p86Mcz8bKFPF2CEJ14v8vrni7WUBzAOYNsSlyoYJ22S/Wh9u6Enljbbr1
    21BkMMLsE79Ytr6rx4ie4w/ZBLAQvhNj8TEQplLstUHWbHundOVOuRkEacUcPTc6
    8iMjyYrYrFKyDLG2oZrL8WKR+r5z28T3nXlTRoenRuRQjTqUMNvs9UR26TDjVSJS
    PRGBw1zROWdn+qPCPsSRRHcAI4DPzBaJvzxDCHtkX2pc+yXVWoh6hqU4WDKJjxlq
    04XXPX3xde/l32mv9kG1JM6MlrE/f5JNtdgeomCKM8FxpRZ+GTL2yn+TbY2LvnL9
    h618WvoecmoilQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUw
    AwEB/zAdBgNVHQ4EFgQU5esozl1oQVNxCDPhbV1O1F6ybKowDQYJKoZIhvcNAQEL
    BQADggEBAKqXOcWLIRxI/3vvdny5KehykbHSE8SLwGHxpVNR8W4IaHoVcK4UFteR
    0sKqqvoN78jJu+9J51VslAa2QNkJpZIGbLWRg/lF2bslP74R11e3g0ZBgto5hxCs
    Lla+f0XwWSUo39jH4Hrtvr/gW5/9TKGsLhnhdPvFPLxdZDUbwdnWCpN46fYrF/6g
    jcS0HU/J9F0SppnTo/M5nfR8T3SSGoLiviRlgQye+s86grPo6Xw1sUEYcEdgIGIr
    3gE/3Z7hKH0urs5B7XEW3wX16MPRqtiCdHr1ho/jhnQ+MRDCEOeodCREV6BAFKby
    Uei2TkN/cnXMqxfJX7YD/Su2NmdCCRs=
    -----END CERTIFICATE-----
kind: ConfigMap
metadata:
  annotations:
    kubernetes.io/description: Contains a CA bundle that can be used to verify the
      kube-apiserver when using internal endpoints such as the internal service IP
      or kubernetes.default.svc. No other usage is guaranteed across distributions
      of Kubernetes clusters.
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:ca.crt: {}
      f:metadata:
        f:annotations:
          .: {}
          f:kubernetes.io/description: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: kube-root-ca.crt
  namespace: default
  uid: 01b44a5b-ca4f-4c6c-809a-a65cbc53ed63
---
apiVersion: v1
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC4zCCAcugAwIBAgIBADANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwdrd29r
    LWNhMCAXDTI0MDUyMTIxNDAyN1oYDzIxMjQwNDI4MjE0MDI3WjASMRAwDgYDVQQD
    Ewdrd29rLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyTqS//Ik
    +z2dmN+p86Mcz8bKFPF2CEJ14v8vrni7WUBzAOYNsSlyoYJ22S/Wh9u6Enljbbr1
    21BkMMLsE79Ytr6rx4ie4w/ZBLAQvhNj8TEQplLstUHWbHundOVOuRkEacUcPTc6
    8iMjyYrYrFKyDLG2oZrL8WKR+r5z28T3nXlTRoenRuRQjTqUMNvs9UR26TDjVSJS
    PRGBw1zROWdn+qPCPsSRRHcAI4DPzBaJvzxDCHtkX2pc+yXVWoh6hqU4WDKJjxlq
    04XXPX3xde/l32mv9kG1JM6MlrE/f5JNtdgeomCKM8FxpRZ+GTL2yn+TbY2LvnL9
    h618WvoecmoilQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUw
    AwEB/zAdBgNVHQ4EFgQU5esozl1oQVNxCDPhbV1O1F6ybKowDQYJKoZIhvcNAQEL
    BQADggEBAKqXOcWLIRxI/3vvdny5KehykbHSE8SLwGHxpVNR8W4IaHoVcK4UFteR
    0sKqqvoN78jJu+9J51VslAa2QNkJpZIGbLWRg/lF2bslP74R11e3g0ZBgto5hxCs
    Lla+f0XwWSUo39jH4Hrtvr/gW5/9TKGsLhnhdPvFPLxdZDUbwdnWCpN46fYrF/6g
    jcS0HU/J9F0SppnTo/M5nfR8T3SSGoLiviRlgQye+s86grPo6Xw1sUEYcEdgIGIr
    3gE/3Z7hKH0urs5B7XEW3wX16MPRqtiCdHr1ho/jhnQ+MRDCEOeodCREV6BAFKby
    Uei2TkN/cnXMqxfJX7YD/Su2NmdCCRs=
    -----END CERTIFICATE-----
kind: ConfigMap
metadata:
  annotations:
    kubernetes.io/description: Contains a CA bundle that can be used to verify the
      kube-apiserver when using internal endpoints such as the internal service IP
      or kubernetes.default.svc. No other usage is guaranteed across distributions
      of Kubernetes clusters.
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:ca.crt: {}
      f:metadata:
        f:annotations:
          .: {}
          f:kubernetes.io/description: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: kube-root-ca.crt
  namespace: kube-node-lease
  uid: 316743be-1c65-40fa-8eab-198b8d0f16fb
---
apiVersion: v1
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC4zCCAcugAwIBAgIBADANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwdrd29r
    LWNhMCAXDTI0MDUyMTIxNDAyN1oYDzIxMjQwNDI4MjE0MDI3WjASMRAwDgYDVQQD
    Ewdrd29rLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyTqS//Ik
    +z2dmN+p86Mcz8bKFPF2CEJ14v8vrni7WUBzAOYNsSlyoYJ22S/Wh9u6Enljbbr1
    21BkMMLsE79Ytr6rx4ie4w/ZBLAQvhNj8TEQplLstUHWbHundOVOuRkEacUcPTc6
    8iMjyYrYrFKyDLG2oZrL8WKR+r5z28T3nXlTRoenRuRQjTqUMNvs9UR26TDjVSJS
    PRGBw1zROWdn+qPCPsSRRHcAI4DPzBaJvzxDCHtkX2pc+yXVWoh6hqU4WDKJjxlq
    04XXPX3xde/l32mv9kG1JM6MlrE/f5JNtdgeomCKM8FxpRZ+GTL2yn+TbY2LvnL9
    h618WvoecmoilQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUw
    AwEB/zAdBgNVHQ4EFgQU5esozl1oQVNxCDPhbV1O1F6ybKowDQYJKoZIhvcNAQEL
    BQADggEBAKqXOcWLIRxI/3vvdny5KehykbHSE8SLwGHxpVNR8W4IaHoVcK4UFteR
    0sKqqvoN78jJu+9J51VslAa2QNkJpZIGbLWRg/lF2bslP74R11e3g0ZBgto5hxCs
    Lla+f0XwWSUo39jH4Hrtvr/gW5/9TKGsLhnhdPvFPLxdZDUbwdnWCpN46fYrF/6g
    jcS0HU/J9F0SppnTo/M5nfR8T3SSGoLiviRlgQye+s86grPo6Xw1sUEYcEdgIGIr
    3gE/3Z7hKH0urs5B7XEW3wX16MPRqtiCdHr1ho/jhnQ+MRDCEOeodCREV6BAFKby
    Uei2TkN/cnXMqxfJX7YD/Su2NmdCCRs=
    -----END CERTIFICATE-----
kind: ConfigMap
metadata:
  annotations:
    kubernetes.io/description: Contains a CA bundle that can be used to verify the
      kube-apiserver when using internal endpoints such as the internal service IP
      or kubernetes.default.svc. No other usage is guaranteed across distributions
      of Kubernetes clusters.
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:ca.crt: {}
      f:metadata:
        f:annotations:
          .: {}
          f:kubernetes.io/description: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: kube-root-ca.crt
  namespace: kube-public
  uid: a5342f8a-772f-4b26-b919-7ab5ecffb31f
---
apiVersion: v1
data:
  client-ca-file: |
    -----BEGIN CERTIFICATE-----
    MIIC4zCCAcugAwIBAgIBADANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwdrd29r
    LWNhMCAXDTI0MDUyMTIxNDAyN1oYDzIxMjQwNDI4MjE0MDI3WjASMRAwDgYDVQQD
    Ewdrd29rLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyTqS//Ik
    +z2dmN+p86Mcz8bKFPF2CEJ14v8vrni7WUBzAOYNsSlyoYJ22S/Wh9u6Enljbbr1
    21BkMMLsE79Ytr6rx4ie4w/ZBLAQvhNj8TEQplLstUHWbHundOVOuRkEacUcPTc6
    8iMjyYrYrFKyDLG2oZrL8WKR+r5z28T3nXlTRoenRuRQjTqUMNvs9UR26TDjVSJS
    PRGBw1zROWdn+qPCPsSRRHcAI4DPzBaJvzxDCHtkX2pc+yXVWoh6hqU4WDKJjxlq
    04XXPX3xde/l32mv9kG1JM6MlrE/f5JNtdgeomCKM8FxpRZ+GTL2yn+TbY2LvnL9
    h618WvoecmoilQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUw
    AwEB/zAdBgNVHQ4EFgQU5esozl1oQVNxCDPhbV1O1F6ybKowDQYJKoZIhvcNAQEL
    BQADggEBAKqXOcWLIRxI/3vvdny5KehykbHSE8SLwGHxpVNR8W4IaHoVcK4UFteR
    0sKqqvoN78jJu+9J51VslAa2QNkJpZIGbLWRg/lF2bslP74R11e3g0ZBgto5hxCs
    Lla+f0XwWSUo39jH4Hrtvr/gW5/9TKGsLhnhdPvFPLxdZDUbwdnWCpN46fYrF/6g
    jcS0HU/J9F0SppnTo/M5nfR8T3SSGoLiviRlgQye+s86grPo6Xw1sUEYcEdgIGIr
    3gE/3Z7hKH0urs5B7XEW3wX16MPRqtiCdHr1ho/jhnQ+MRDCEOeodCREV6BAFKby
    Uei2TkN/cnXMqxfJX7YD/Su2NmdCCRs=
    -----END CERTIFICATE-----
kind: ConfigMap
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:client-ca-file: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: extension-apiserver-authentication
  namespace: kube-system
  uid: 61996dc7-058f-4a98-8ab9-8e5d915aa5e8
---
apiVersion: v1
data:
  since: "2024-05-22"
kind: ConfigMap
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:since: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-apiserver-legacy-service-account-token-tracking
  namespace: kube-system
  uid: 7a5e0a4c-66e7-4700-a3f4-629e2f2796af
---
apiVersion: v1
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC4zCCAcugAwIBAgIBADANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwdrd29r
    LWNhMCAXDTI0MDUyMTIxNDAyN1oYDzIxMjQwNDI4MjE0MDI3WjASMRAwDgYDVQQD
    Ewdrd29rLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyTqS//Ik
    +z2dmN+p86Mcz8bKFPF2CEJ14v8vrni7WUBzAOYNsSlyoYJ22S/Wh9u6Enljbbr1
    21BkMMLsE79Ytr6rx4ie4w/ZBLAQvhNj8TEQplLstUHWbHundOVOuRkEacUcPTc6
    8iMjyYrYrFKyDLG2oZrL8WKR+r5z28T3nXlTRoenRuRQjTqUMNvs9UR26TDjVSJS
    PRGBw1zROWdn+qPCPsSRRHcAI4DPzBaJvzxDCHtkX2pc+yXVWoh6hqU4WDKJjxlq
    04XXPX3xde/l32mv9kG1JM6MlrE/f5JNtdgeomCKM8FxpRZ+GTL2yn+TbY2LvnL9
    h618WvoecmoilQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUw
    AwEB/zAdBgNVHQ4EFgQU5esozl1oQVNxCDPhbV1O1F6ybKowDQYJKoZIhvcNAQEL
    BQADggEBAKqXOcWLIRxI/3vvdny5KehykbHSE8SLwGHxpVNR8W4IaHoVcK4UFteR
    0sKqqvoN78jJu+9J51VslAa2QNkJpZIGbLWRg/lF2bslP74R11e3g0ZBgto5hxCs
    Lla+f0XwWSUo39jH4Hrtvr/gW5/9TKGsLhnhdPvFPLxdZDUbwdnWCpN46fYrF/6g
    jcS0HU/J9F0SppnTo/M5nfR8T3SSGoLiviRlgQye+s86grPo6Xw1sUEYcEdgIGIr
    3gE/3Z7hKH0urs5B7XEW3wX16MPRqtiCdHr1ho/jhnQ+MRDCEOeodCREV6BAFKby
    Uei2TkN/cnXMqxfJX7YD/Su2NmdCCRs=
    -----END CERTIFICATE-----
kind: ConfigMap
metadata:
  annotations:
    kubernetes.io/description: Contains a CA bundle that can be used to verify the
      kube-apiserver when using internal endpoints such as the internal service IP
      or kubernetes.default.svc. No other usage is guaranteed across distributions
      of Kubernetes clusters.
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:ca.crt: {}
      f:metadata:
        f:annotations:
          .: {}
          f:kubernetes.io/description: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: kube-root-ca.crt
  namespace: kube-system
  uid: b04d1bfd-8f25-4431-8807-e6762c8f4848
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  generation: 1
  labels:
    app: app
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:app: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app: {}
          f:spec:
            f:containers:
              k:{"name":"app"}:
                .: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: kubectl-create
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -71765485559)"
  name: app
  namespace: default
  uid: edeaba94-a640-42f4-acc8-fc69fe8a2010
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: app
    spec:
      containers:
      - image: app
        imagePullPolicy: Always
        name: app
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 3
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    lastUpdateTime: "$(time-offset-nanosecond -71765485559)"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "$(time-offset-nanosecond -72765485559)"
    lastUpdateTime: "$(time-offset-nanosecond -71765485559)"
    message: ReplicaSet "app-67f9df97bd" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 3
  replicas: 3
  updatedReplicas: 3
---
addressType: IPv4
apiVersion: discovery.k8s.io/v1beta1
endpoints:
- addresses:
  - 172.26.0.3
  conditions:
    ready: true
kind: EndpointSlice
metadata:
  creationTimestamp: "$(time-offset-nanosecond -73765485559)"
  generation: 1
  labels:
    kubernetes.io/service-name: kubernetes
  managedFields:
  - apiVersion: discovery.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:addressType: {}
      f:endpoints: {}
      f:metadata:
        f:labels:
          .: {}
          f:kubernetes.io/service-name: {}
      f:ports: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -73765485559)"
  name: kubernetes
  namespace: default
  uid: 9b1fa266-e496-47e6-9cf0-ba4edc8800d2
ports:
- name: https
  port: 6443
  protocol: TCP
---
action: Binding
apiVersion: v1
eventTime: "$(time-offset-nanosecond -71747926559)"
firstTimestamp: null
involvedObject:
  apiVersion: v1
  kind: Pod
  name: app-67f9df97bd-77lth
  namespace: default
  resourceVersion: "218"
  uid: c33c31fc-da95-4a29-8c12-afebc0fb8d27
kind: Event
lastTimestamp: null
message: Successfully assigned default/app-67f9df97bd-77lth to node-000000
metadata:
  creationTimestamp: "$(time-offset-nanosecond -71765485559)"
  managedFields:
  - apiVersion: events.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:action: {}
      f:eventTime: {}
      f:note: {}
      f:reason: {}
      f:regarding: {}
      f:reportingController: {}
      f:reportingInstance: {}
      f:type: {}
    manager: kube-scheduler
    operation: Update
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd-77lth.17d1ed78c8524d3b
  namespace: default
  uid: 2121d1c2-53e7-49d8-a1c8-37a4fc5328d7
reason: Scheduled
reportingComponent: default-scheduler
reportingInstance: default-scheduler-913b2f55c6e2
source: {}
type: Normal
---
action: Binding
apiVersion: v1
eventTime: "$(time-offset-nanosecond -71749388559)"
firstTimestamp: null
involvedObject:
  apiVersion: v1
  kind: Pod
  name: app-67f9df97bd-lrtt8
  namespace: default
  resourceVersion: "214"
  uid: 6f5979d0-96e5-477e-b6b0-73f0391b4258
kind: Event
lastTimestamp: null
message: Successfully assigned default/app-67f9df97bd-lrtt8 to node-000001
metadata:
  creationTimestamp: "$(time-offset-nanosecond -71765485559)"
  managedFields:
  - apiVersion: events.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:action: {}
      f:eventTime: {}
      f:note: {}
      f:reason: {}
      f:regarding: {}
      f:reportingController: {}
      f:reportingInstance: {}
      f:type: {}
    manager: kube-scheduler
    operation: Update
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd-lrtt8.17d1ed78c83c22ed
  namespace: default
  uid: a8ac5df4-8e07-4e74-b202-ae7b92ac0bbf
reason: Scheduled
reportingComponent: default-scheduler
reportingInstance: default-scheduler-913b2f55c6e2
source: {}
type: Normal
---
action: Binding
apiVersion: v1
eventTime: "$(time-offset-nanosecond -71736061559)"
firstTimestamp: null
involvedObject:
  apiVersion: v1
  kind: Pod
  name: app-67f9df97bd-z2f8g
  namespace: default
  resourceVersion: "220"
  uid: d2446d89-badd-4da3-be52-2233c2931ae9
kind: Event
lastTimestamp: null
message: Successfully assigned default/app-67f9df97bd-z2f8g to node-000001
metadata:
  creationTimestamp: "$(time-offset-nanosecond -71765485559)"
  managedFields:
  - apiVersion: events.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:action: {}
      f:eventTime: {}
      f:note: {}
      f:reason: {}
      f:regarding: {}
      f:reportingController: {}
      f:reportingInstance: {}
      f:type: {}
    manager: kube-scheduler
    operation: Update
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd-z2f8g.17d1ed78c9076b92
  namespace: default
  uid: c8a9b5dc-a2f6-48cb-9081-91b4338eb9c2
reason: Scheduled
reportingComponent: default-scheduler
reportingInstance: default-scheduler-913b2f55c6e2
source: {}
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: apps/v1
  kind: ReplicaSet
  name: app-67f9df97bd
  namespace: default
  resourceVersion: "206"
  uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: 'Created pod: app-67f9df97bd-lrtt8'
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: app-67f9df97bd.17d1ed78addce692
  namespace: default
  uid: 0c85e6cc-4eb7-4c33-8b8d-b50b76b4beed
reason: SuccessfulCreate
reportingComponent: replicaset-controller
reportingInstance: ""
source:
  component: replicaset-controller
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: apps/v1
  kind: ReplicaSet
  name: app-67f9df97bd
  namespace: default
  resourceVersion: "206"
  uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: 'Created pod: app-67f9df97bd-77lth'
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: app-67f9df97bd.17d1ed78af41643d
  namespace: default
  uid: eebf4aec-7e9d-4eb9-8963-09ee8ca0ed1a
reason: SuccessfulCreate
reportingComponent: replicaset-controller
reportingInstance: ""
source:
  component: replicaset-controller
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: apps/v1
  kind: ReplicaSet
  name: app-67f9df97bd
  namespace: default
  resourceVersion: "206"
  uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: 'Created pod: app-67f9df97bd-z2f8g'
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: app-67f9df97bd.17d1ed78af572914
  namespace: default
  uid: 67980882-520f-4ada-9fe5-019571abcaf1
reason: SuccessfulCreate
reportingComponent: replicaset-controller
reportingInstance: ""
source:
  component: replicaset-controller
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: apps/v1
  kind: Deployment
  name: app
  namespace: default
  resourceVersion: "69"
  uid: edeaba94-a640-42f4-acc8-fc69fe8a2010
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: Scaled up replica set app-67f9df97bd to 3
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: app.17d1ed78abe53e43
  namespace: default
  uid: 07b58a3f-0596-400a-8890-b4afa507a9fb
reason: ScalingReplicaSet
reportingComponent: deployment-controller
reportingInstance: ""
source:
  component: deployment-controller
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: v1
  kind: Node
  name: node-000000
  uid: 9460b61c-d440-4229-9566-82965eecb0f5
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: 'Node node-000000 event: Registered Node node-000000 in Controller'
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: node-000000.17d1ed78b97ce99c
  namespace: default
  uid: f917d99d-dcbf-4c9c-8d1d-65889eaec0f0
reason: RegisteredNode
reportingComponent: node-controller
reportingInstance: ""
source:
  component: node-controller
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: v1
  kind: Node
  name: node-000001
  uid: fef6237a-9ee5-4720-b7f2-44836e593d20
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: 'Node node-000001 event: Registered Node node-000001 in Controller'
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: node-000001.17d1ed78b978f2b3
  namespace: default
  uid: a7a32e05-d718-42d7-9666-15f5143c53d1
reason: RegisteredNode
reportingComponent: node-controller
reportingInstance: ""
source:
  component: node-controller
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -72765485559)"
involvedObject:
  apiVersion: coordination.k8s.io/v1
  kind: Lease
  name: kube-controller-manager
  namespace: kube-system
  resourceVersion: "202"
  uid: cb92ee59-af2b-41a0-9439-3dea3c82f269
kind: Event
lastTimestamp: "$(time-offset-nanosecond -72765485559)"
message: b270af3dcafa_046fd049-04e6-4d7d-8635-1d65538056eb became leader
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  name: kube-controller-manager.17d1ed78a22fc0dd
  namespace: kube-system
  uid: f5df8be3-6b3e-4313-90a1-a465026365d3
reason: LeaderElection
reportingComponent: kube-controller-manager
reportingInstance: ""
source:
  component: kube-controller-manager
type: Normal
---
apiVersion: v1
count: 1
eventTime: null
firstTimestamp: "$(time-offset-nanosecond -71765485559)"
involvedObject:
  apiVersion: coordination.k8s.io/v1
  kind: Lease
  name: kube-scheduler
  namespace: kube-system
  resourceVersion: "236"
  uid: dad5e77e-1dda-4b72-96c7-bf5595013e20
kind: Event
lastTimestamp: "$(time-offset-nanosecond -71765485559)"
message: 913b2f55c6e2_dbda68b2-37aa-4a56-a27a-f44d317a219c became leader
metadata:
  creationTimestamp: "$(time-offset-nanosecond -71765485559)"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:count: {}
      f:firstTimestamp: {}
      f:involvedObject: {}
      f:lastTimestamp: {}
      f:message: {}
      f:reason: {}
      f:reportingComponent: {}
      f:source:
        f:component: {}
      f:type: {}
    manager: kube-scheduler
    operation: Update
    time: "$(time-offset-nanosecond -71765485559)"
  name: kube-scheduler.17d1ed78c74cb4c8
  namespace: kube-system
  uid: 3d9309b1-5436-4351-bc44-1272e8587537
reason: LeaderElection
reportingComponent: default-scheduler
reportingInstance: ""
source:
  component: default-scheduler
type: Normal
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: catch-all
  uid: cfd84439-203a-4d0a-abf9-ecbecd5dab37
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 10000
  priorityLevelConfiguration:
    name: catch-all
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - group:
        name: system:unauthenticated
      kind: Group
    - group:
        name: system:authenticated
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "catch-all" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: endpoint-controller
  uid: 0d01622a-0b69-4a3c-84fa-008605e4b156
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 150
  priorityLevelConfiguration:
    name: workload-high
  rules:
  - resourceRules:
    - apiGroups:
      - ""
      namespaces:
      - '*'
      resources:
      - endpoints
      verbs:
      - get
      - create
      - update
    subjects:
    - kind: User
      user:
        name: system:kube-controller-manager
    - kind: ServiceAccount
      serviceAccount:
        name: endpoint-controller
        namespace: kube-system
    - kind: ServiceAccount
      serviceAccount:
        name: endpointslicemirroring-controller
        namespace: kube-system
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "workload-high" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: exempt
  uid: 8678e174-d6a8-4bb1-b728-98e4abb91575
spec:
  matchingPrecedence: 1
  priorityLevelConfiguration:
    name: exempt
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - group:
        name: system:masters
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "exempt" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: global-default
  uid: 4068f221-c52d-4dd3-8a76-58cb04f2ab38
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 9900
  priorityLevelConfiguration:
    name: global-default
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - group:
        name: system:unauthenticated
      kind: Group
    - group:
        name: system:authenticated
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "global-default" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-controller-manager
  uid: 6448b792-02ce-47d6-9244-d756a81f9ed6
spec:
  distinguisherMethod:
    type: ByNamespace
  matchingPrecedence: 800
  priorityLevelConfiguration:
    name: workload-high
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - kind: User
      user:
        name: system:kube-controller-manager
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "workload-high" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-scheduler
  uid: 39d474ba-88de-45f8-85da-c31c7ad3a700
spec:
  distinguisherMethod:
    type: ByNamespace
  matchingPrecedence: 800
  priorityLevelConfiguration:
    name: workload-high
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - kind: User
      user:
        name: system:kube-scheduler
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "workload-high" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-system-service-accounts
  uid: b0c19102-c47d-48f8-b282-fa08dc29d13a
spec:
  distinguisherMethod:
    type: ByNamespace
  matchingPrecedence: 900
  priorityLevelConfiguration:
    name: workload-high
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - kind: ServiceAccount
      serviceAccount:
        name: '*'
        namespace: kube-system
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "workload-high" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: probes
  uid: 2d7054ff-3b6f-4a6b-a1ea-81674544da91
spec:
  matchingPrecedence: 2
  priorityLevelConfiguration:
    name: exempt
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - /healthz
      - /readyz
      - /livez
      verbs:
      - get
    subjects:
    - group:
        name: system:unauthenticated
      kind: Group
    - group:
        name: system:authenticated
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "exempt" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: service-accounts
  uid: eec77e31-743e-4173-adff-ff3446ba5589
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 9000
  priorityLevelConfiguration:
    name: workload-low
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - group:
        name: system:serviceaccounts
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "workload-low" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: system-leader-election
  uid: 806f3aca-2128-425a-9082-48425b76f5fe
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 100
  priorityLevelConfiguration:
    name: leader-election
  rules:
  - resourceRules:
    - apiGroups:
      - coordination.k8s.io
      namespaces:
      - '*'
      resources:
      - leases
      verbs:
      - get
      - create
      - update
    subjects:
    - kind: User
      user:
        name: system:kube-controller-manager
    - kind: User
      user:
        name: system:kube-scheduler
    - kind: ServiceAccount
      serviceAccount:
        name: '*'
        namespace: kube-system
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "leader-election" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: system-node-high
  uid: f7e32ae3-ca45-449c-beb7-7a3c4f77e2e0
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 400
  priorityLevelConfiguration:
    name: node-high
  rules:
  - resourceRules:
    - apiGroups:
      - ""
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - nodes
      - nodes/status
      verbs:
      - '*'
    - apiGroups:
      - coordination.k8s.io
      namespaces:
      - '*'
      resources:
      - leases
      verbs:
      - '*'
    subjects:
    - group:
        name: system:nodes
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "node-high" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: system-nodes
  uid: a53f6787-a8b8-4681-aeee-270fa8a885af
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 500
  priorityLevelConfiguration:
    name: system
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    resourceRules:
    - apiGroups:
      - '*'
      clusterScope: true
      namespaces:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    subjects:
    - group:
        name: system:nodes
      kind: Group
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "system" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"Dangling"}:
            .: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: api-priority-and-fairness-config-consumer-v1
    operation: Apply
    subresource: status
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:distinguisherMethod:
          .: {}
          f:type: {}
        f:matchingPrecedence: {}
        f:priorityLevelConfiguration:
          f:name: {}
        f:rules: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: workload-leader-election
  uid: 002ca807-9801-46ae-ac2e-acae7850b11b
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 200
  priorityLevelConfiguration:
    name: leader-election
  rules:
  - resourceRules:
    - apiGroups:
      - ""
      namespaces:
      - '*'
      resources:
      - endpoints
      - configmaps
      verbs:
      - get
      - create
      - update
    - apiGroups:
      - coordination.k8s.io
      namespaces:
      - '*'
      resources:
      - leases
      verbs:
      - get
      - create
      - update
    subjects:
    - kind: ServiceAccount
      serviceAccount:
        name: '*'
        namespace: kube-system
status:
  conditions:
  - lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: This FlowSchema references the PriorityLevelConfiguration object named
      "leader-election" and it exists
    reason: Found
    status: "False"
    type: Dangling
---
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  managedFields:
  - apiVersion: coordination.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:ownerReferences:
          .: {}
          k:{"uid":"9460b61c-d440-4229-9566-82965eecb0f5"}: {}
      f:spec:
        f:holderIdentity: {}
        f:leaseDurationSeconds: {}
        f:renewTime: {}
    manager: kwok
    operation: Update
    time: "$(time-offset-nanosecond -23765485559)"
  name: node-000000
  namespace: kube-node-lease
  ownerReferences:
  - apiVersion: v1
    kind: Node
    name: node-000000
    uid: 9460b61c-d440-4229-9566-82965eecb0f5
  uid: f4b08a70-7c48-4ffc-b07d-c3d9ecad0d20
spec:
  holderIdentity: 820a0d779d8f_4cac6f77-a27c-4d3c-9da8-002c12d46388
  leaseDurationSeconds: 200
  renewTime: "$(time-offset-nanosecond -23051396559)"
---
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  managedFields:
  - apiVersion: coordination.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:ownerReferences:
          .: {}
          k:{"uid":"fef6237a-9ee5-4720-b7f2-44836e593d20"}: {}
      f:spec:
        f:holderIdentity: {}
        f:leaseDurationSeconds: {}
        f:renewTime: {}
    manager: kwok
    operation: Update
    time: "$(time-offset-nanosecond -23765485559)"
  name: node-000001
  namespace: kube-node-lease
  ownerReferences:
  - apiVersion: v1
    kind: Node
    name: node-000001
    uid: fef6237a-9ee5-4720-b7f2-44836e593d20
  uid: 05d9daee-5e12-4188-9516-4dbde4ddc68a
spec:
  holderIdentity: 820a0d779d8f_4cac6f77-a27c-4d3c-9da8-002c12d46388
  leaseDurationSeconds: 200
  renewTime: "$(time-offset-nanosecond -23036228559)"
---
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    apiserver.kubernetes.io/identity: kube-apiserver
    kubernetes.io/hostname: 7b8a7c674a18
  managedFields:
  - apiVersion: coordination.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:apiserver.kubernetes.io/identity: {}
          f:kubernetes.io/hostname: {}
      f:spec:
        f:holderIdentity: {}
        f:leaseDurationSeconds: {}
        f:renewTime: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -4765485559)"
  name: apiserver-l3brf4f7d6hqxyrp74atdr6bya
  namespace: kube-system
  uid: 8b46e976-537c-4ab1-9079-bf8275501dbc
spec:
  holderIdentity: apiserver-l3brf4f7d6hqxyrp74atdr6bya_6ee62cdf-92e4-4b62-8c3b-dbd9f231e8ae
  leaseDurationSeconds: 3600
  renewTime: "$(time-offset-nanosecond -3988027559)"
---
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: coordination.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:acquireTime: {}
        f:holderIdentity: {}
        f:leaseDurationSeconds: {}
        f:leaseTransitions: {}
        f:renewTime: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -765485559)"
  name: kube-controller-manager
  namespace: kube-system
  uid: cb92ee59-af2b-41a0-9439-3dea3c82f269
spec:
  acquireTime: "$(time-offset-nanosecond -72393533559)"
  holderIdentity: b270af3dcafa_046fd049-04e6-4d7d-8635-1d65538056eb
  leaseDurationSeconds: 15
  leaseTransitions: 0
  renewTime: "$(time-offset-nanosecond -30863559)"
---
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  managedFields:
  - apiVersion: coordination.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:acquireTime: {}
        f:holderIdentity: {}
        f:leaseDurationSeconds: {}
        f:leaseTransitions: {}
        f:renewTime: {}
    manager: kube-scheduler
    operation: Update
    time: "$(time-offset-nanosecond -1765485559)"
  name: kube-scheduler
  namespace: kube-system
  uid: dad5e77e-1dda-4b72-96c7-bf5595013e20
spec:
  acquireTime: "$(time-offset-nanosecond -71770971559)"
  holderIdentity: 913b2f55c6e2_dbda68b2-37aa-4a56-a27a-f44d317a219c
  leaseDurationSeconds: 15
  leaseTransitions: 0
  renewTime: "$(time-offset-nanosecond -1401289559)"
---
apiVersion: v1
kind: Node
metadata:
  annotations:
    kwok.x-k8s.io/node: fake
    metrics.k8s.io/resource-metrics-path: /metrics/nodes/node-000000/metrics/resource
    node.alpha.kubernetes.io/ttl: "0"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    beta.kubernetes.io/arch: amd64
    beta.kubernetes.io/os: linux
    kubernetes.io/arch: amd64
    kubernetes.io/hostname: node-000000
    kubernetes.io/os: linux
    kubernetes.io/role: agent
    kwok.x-k8s.io/kwokctl-scale: node
    node-role.kubernetes.io/agent: ""
    type: kwok
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kwok.x-k8s.io/node: {}
          f:metrics.k8s.io/resource-metrics-path: {}
          f:node.alpha.kubernetes.io/ttl: {}
        f:labels:
          .: {}
          f:beta.kubernetes.io/arch: {}
          f:beta.kubernetes.io/os: {}
          f:kubernetes.io/arch: {}
          f:kubernetes.io/hostname: {}
          f:kubernetes.io/os: {}
          f:kubernetes.io/role: {}
          f:kwok.x-k8s.io/kwokctl-scale: {}
          f:node-role.kubernetes.io/agent: {}
          f:type: {}
      f:spec:
        f:podCIDR: {}
        f:podCIDRs:
          .: {}
          v:"10.0.0.1/24": {}
    manager: kwokctl
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:addresses:
          .: {}
          k:{"type":"Hostname"}:
            .: {}
            f:address: {}
            f:type: {}
        f:conditions:
          .: {}
          k:{"type":"DiskPressure"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"MemoryPressure"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"NetworkUnavailable"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"PIDPressure"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:daemonEndpoints:
          f:kubeletEndpoint:
            f:Port: {}
        f:nodeInfo:
          f:containerRuntimeVersion: {}
          f:kernelVersion: {}
          f:kubeProxyVersion: {}
          f:kubeletVersion: {}
        f:phase: {}
    manager: kwok
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -74765485559)"
  name: node-000000
  uid: 9460b61c-d440-4229-9566-82965eecb0f5
spec:
  podCIDR: 10.0.0.1/24
  podCIDRs:
  - 10.0.0.1/24
status:
  addresses:
  - address: kwok-kwok-kwok-controller
    type: Hostname
  allocatable:
    cpu: "32"
    memory: 256Gi
    pods: "110"
  capacity:
    cpu: "32"
    memory: 256Gi
    pods: "110"
  conditions:
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet is posting ready status
    reason: KubeletReady
    status: "True"
    type: Ready
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet has sufficient memory available
    reason: KubeletHasSufficientMemory
    status: "False"
    type: MemoryPressure
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet has no disk pressure
    reason: KubeletHasNoDiskPressure
    status: "False"
    type: DiskPressure
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet has sufficient PID available
    reason: KubeletHasSufficientPID
    status: "False"
    type: PIDPressure
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: RouteController created a route
    reason: RouteCreated
    status: "False"
    type: NetworkUnavailable
  daemonEndpoints:
    kubeletEndpoint:
      Port: 10247
  nodeInfo:
    architecture: amd64
    bootID: ""
    containerRuntimeVersion: kwok-v0.5.2
    kernelVersion: kwok-v0.5.2
    kubeProxyVersion: kwok-v0.5.2
    kubeletVersion: kwok-v0.5.2
    machineID: ""
    operatingSystem: linux
    osImage: ""
    systemUUID: ""
  phase: Running
---
apiVersion: v1
kind: Node
metadata:
  annotations:
    kwok.x-k8s.io/node: fake
    metrics.k8s.io/resource-metrics-path: /metrics/nodes/node-000001/metrics/resource
    node.alpha.kubernetes.io/ttl: "0"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    beta.kubernetes.io/arch: amd64
    beta.kubernetes.io/os: linux
    kubernetes.io/arch: amd64
    kubernetes.io/hostname: node-000001
    kubernetes.io/os: linux
    kubernetes.io/role: agent
    kwok.x-k8s.io/kwokctl-scale: node
    node-role.kubernetes.io/agent: ""
    type: kwok
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kwok.x-k8s.io/node: {}
          f:metrics.k8s.io/resource-metrics-path: {}
          f:node.alpha.kubernetes.io/ttl: {}
        f:labels:
          .: {}
          f:beta.kubernetes.io/arch: {}
          f:beta.kubernetes.io/os: {}
          f:kubernetes.io/arch: {}
          f:kubernetes.io/hostname: {}
          f:kubernetes.io/os: {}
          f:kubernetes.io/role: {}
          f:kwok.x-k8s.io/kwokctl-scale: {}
          f:node-role.kubernetes.io/agent: {}
          f:type: {}
      f:spec:
        f:podCIDR: {}
        f:podCIDRs:
          .: {}
          v:"10.0.1.1/24": {}
    manager: kwokctl
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:addresses:
          .: {}
          k:{"type":"Hostname"}:
            .: {}
            f:address: {}
            f:type: {}
        f:conditions:
          .: {}
          k:{"type":"DiskPressure"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"MemoryPressure"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"NetworkUnavailable"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"PIDPressure"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastHeartbeatTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:daemonEndpoints:
          f:kubeletEndpoint:
            f:Port: {}
        f:nodeInfo:
          f:containerRuntimeVersion: {}
          f:kernelVersion: {}
          f:kubeProxyVersion: {}
          f:kubeletVersion: {}
        f:phase: {}
    manager: kwok
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -74765485559)"
  name: node-000001
  uid: fef6237a-9ee5-4720-b7f2-44836e593d20
spec:
  podCIDR: 10.0.1.1/24
  podCIDRs:
  - 10.0.1.1/24
status:
  addresses:
  - address: kwok-kwok-kwok-controller
    type: Hostname
  allocatable:
    cpu: "32"
    memory: 256Gi
    pods: "110"
  capacity:
    cpu: "32"
    memory: 256Gi
    pods: "110"
  conditions:
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet is posting ready status
    reason: KubeletReady
    status: "True"
    type: Ready
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet has sufficient memory available
    reason: KubeletHasSufficientMemory
    status: "False"
    type: MemoryPressure
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet has no disk pressure
    reason: KubeletHasNoDiskPressure
    status: "False"
    type: DiskPressure
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: kubelet has sufficient PID available
    reason: KubeletHasSufficientPID
    status: "False"
    type: PIDPressure
  - lastHeartbeatTime: "$(time-offset-nanosecond -74765485559)"
    lastTransitionTime: "$(time-offset-nanosecond -75765485559)"
    message: RouteController created a route
    reason: RouteCreated
    status: "False"
    type: NetworkUnavailable
  daemonEndpoints:
    kubeletEndpoint:
      Port: 10247
  nodeInfo:
    architecture: amd64
    bootID: ""
    containerRuntimeVersion: kwok-v0.5.2
    kernelVersion: kwok-v0.5.2
    kubeProxyVersion: kwok-v0.5.2
    kubeletVersion: kwok-v0.5.2
    machineID: ""
    operatingSystem: linux
    osImage: ""
    systemUUID: ""
  phase: Running
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kubernetes.io/metadata.name: default
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kubernetes.io/metadata.name: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: default
  uid: bf557944-9d53-4f8b-bbb8-5897d2e5e84f
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kubernetes.io/metadata.name: kube-node-lease
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kubernetes.io/metadata.name: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-node-lease
  uid: 632b108c-0bde-46c4-a07a-c26a2a9b047e
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kubernetes.io/metadata.name: kube-public
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kubernetes.io/metadata.name: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-public
  uid: 977c94ff-38ed-45fc-87c7-f06b39994cf4
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  labels:
    kubernetes.io/metadata.name: kube-system
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:kubernetes.io/metadata.name: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: kube-system
  uid: c419d416-cf24-4c9d-86ed-313af9d11689
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  generateName: app-67f9df97bd-
  labels:
    app: app
    pod-template-hash: 67f9df97bd
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:generateName: {}
        f:labels:
          .: {}
          f:app: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"d59d4bb0-1d03-45b7-8385-8b0ef63524f3"}: {}
      f:spec:
        f:containers:
          k:{"name":"app"}:
            .: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.0.0.1"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kwok
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd-77lth
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: app-67f9df97bd
    uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
  uid: c33c31fc-da95-4a29-8c12-afebc0fb8d27
spec:
  containers:
  - image: app
    imagePullPolicy: Always
    name: app
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-s5kg5
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node-000000
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-s5kg5
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - image: app
    imageID: ""
    lastState: {}
    name: app
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: "$(time-offset-nanosecond -71765485559)"
  phase: Running
  podIP: 10.0.0.1
  podIPs:
  - ip: 10.0.0.1
  qosClass: BestEffort
  startTime: "$(time-offset-nanosecond -71765485559)"
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  generateName: app-67f9df97bd-
  labels:
    app: app
    pod-template-hash: 67f9df97bd
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:generateName: {}
        f:labels:
          .: {}
          f:app: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"d59d4bb0-1d03-45b7-8385-8b0ef63524f3"}: {}
      f:spec:
        f:containers:
          k:{"name":"app"}:
            .: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.0.1.1"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kwok
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd-lrtt8
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: app-67f9df97bd
    uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
  uid: 6f5979d0-96e5-477e-b6b0-73f0391b4258
spec:
  containers:
  - image: app
    imagePullPolicy: Always
    name: app
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-8wk7k
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node-000001
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-8wk7k
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - image: app
    imageID: ""
    lastState: {}
    name: app
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: "$(time-offset-nanosecond -71765485559)"
  phase: Running
  podIP: 10.0.1.1
  podIPs:
  - ip: 10.0.1.1
  qosClass: BestEffort
  startTime: "$(time-offset-nanosecond -71765485559)"
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  generateName: app-67f9df97bd-
  labels:
    app: app
    pod-template-hash: 67f9df97bd
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:generateName: {}
        f:labels:
          .: {}
          f:app: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"d59d4bb0-1d03-45b7-8385-8b0ef63524f3"}: {}
      f:spec:
        f:containers:
          k:{"name":"app"}:
            .: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.0.1.2"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kwok
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd-z2f8g
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: app-67f9df97bd
    uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
  uid: d2446d89-badd-4da3-be52-2233c2931ae9
spec:
  containers:
  - image: app
    imagePullPolicy: Always
    name: app
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-6965p
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node-000001
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-6965p
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "$(time-offset-nanosecond -71765485559)"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - image: app
    imageID: ""
    lastState: {}
    name: app
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: "$(time-offset-nanosecond -71765485559)"
  phase: Running
  podIP: 10.0.1.2
  podIPs:
  - ip: 10.0.1.2
  qosClass: BestEffort
  startTime: "$(time-offset-nanosecond -71765485559)"
---
apiVersion: scheduling.k8s.io/v1
description: Used for system critical pods that must run in the cluster, but can be
  moved to another node if necessary.
kind: PriorityClass
metadata:
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  generation: 1
  managedFields:
  - apiVersion: scheduling.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:description: {}
      f:preemptionPolicy: {}
      f:value: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system-cluster-critical
  uid: c6474e22-2e5e-4163-909d-4de5f154dd67
preemptionPolicy: PreemptLowerPriority
value: 2000000000
---
apiVersion: scheduling.k8s.io/v1
description: Used for system critical pods that must not be moved from their current
  node.
kind: PriorityClass
metadata:
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  generation: 1
  managedFields:
  - apiVersion: scheduling.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:description: {}
      f:preemptionPolicy: {}
      f:value: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system-node-critical
  uid: cdb9a918-b8f9-432f-9b82-38d2dbe1e1be
preemptionPolicy: PreemptLowerPriority
value: 2000001000
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: catch-all
  uid: 4e11ed6c-4cd7-437a-8c2c-f599f08dbac4
spec:
  limited:
    lendablePercent: 0
    limitResponse:
      type: Reject
    nominalConcurrencyShares: 5
  type: Limited
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:exempt:
          .: {}
          f:lendablePercent: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: exempt
  uid: 74e9e301-9ef4-45ec-9ea5-09cb9c087d41
spec:
  exempt:
    lendablePercent: 0
    nominalConcurrencyShares: 0
  type: Exempt
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:queuing:
              .: {}
              f:handSize: {}
              f:queueLengthLimit: {}
              f:queues: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: global-default
  uid: bb9093f3-0bc6-4350-9b66-bfa2d5dfd49d
spec:
  limited:
    lendablePercent: 50
    limitResponse:
      queuing:
        handSize: 6
        queueLengthLimit: 50
        queues: 128
      type: Queue
    nominalConcurrencyShares: 20
  type: Limited
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:queuing:
              .: {}
              f:handSize: {}
              f:queueLengthLimit: {}
              f:queues: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: leader-election
  uid: 6c45b152-ac95-4ed3-83de-18a31cf3990e
spec:
  limited:
    lendablePercent: 0
    limitResponse:
      queuing:
        handSize: 4
        queueLengthLimit: 50
        queues: 16
      type: Queue
    nominalConcurrencyShares: 10
  type: Limited
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:queuing:
              .: {}
              f:handSize: {}
              f:queueLengthLimit: {}
              f:queues: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: node-high
  uid: c239b711-d7a3-40f0-bc96-7aac4fc043c2
spec:
  limited:
    lendablePercent: 25
    limitResponse:
      queuing:
        handSize: 6
        queueLengthLimit: 50
        queues: 64
      type: Queue
    nominalConcurrencyShares: 40
  type: Limited
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:queuing:
              .: {}
              f:handSize: {}
              f:queueLengthLimit: {}
              f:queues: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: system
  uid: dc7d34ec-1d9c-40fa-a1e6-054e4ff48bbb
spec:
  limited:
    lendablePercent: 33
    limitResponse:
      queuing:
        handSize: 6
        queueLengthLimit: 50
        queues: 64
      type: Queue
    nominalConcurrencyShares: 30
  type: Limited
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:queuing:
              .: {}
              f:handSize: {}
              f:queueLengthLimit: {}
              f:queues: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: workload-high
  uid: 6dba46e8-033a-40a5-a4d8-7e8262a6d703
spec:
  limited:
    lendablePercent: 50
    limitResponse:
      queuing:
        handSize: 6
        queueLengthLimit: 50
        queues: 128
      type: Queue
    nominalConcurrencyShares: 40
  type: Limited
status: {}
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: PriorityLevelConfiguration
metadata:
  annotations:
    apf.kubernetes.io/autoupdate-spec: "true"
  creationTimestamp: "$(time-offset-nanosecond -75765485559)"
  generation: 1
  managedFields:
  - apiVersion: flowcontrol.apiserver.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:apf.kubernetes.io/autoupdate-spec: {}
      f:spec:
        f:limited:
          .: {}
          f:lendablePercent: {}
          f:limitResponse:
            .: {}
            f:queuing:
              .: {}
              f:handSize: {}
              f:queueLengthLimit: {}
              f:queues: {}
            f:type: {}
          f:nominalConcurrencyShares: {}
        f:type: {}
    manager: api-priority-and-fairness-config-producer-v1
    operation: Update
    time: "$(time-offset-nanosecond -75765485559)"
  name: workload-low
  uid: b88ffafd-063d-47fc-95af-0063e514fe7f
spec:
  limited:
    lendablePercent: 90
    limitResponse:
      queuing:
        handSize: 6
        queueLengthLimit: 50
        queues: 128
      type: Queue
    nominalConcurrencyShares: 100
  type: Limited
status: {}
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  annotations:
    deployment.kubernetes.io/desired-replicas: "3"
    deployment.kubernetes.io/max-replicas: "4"
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  generation: 1
  labels:
    app: app
    pod-template-hash: 67f9df97bd
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:deployment.kubernetes.io/desired-replicas: {}
          f:deployment.kubernetes.io/max-replicas: {}
          f:deployment.kubernetes.io/revision: {}
        f:labels:
          .: {}
          f:app: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"edeaba94-a640-42f4-acc8-fc69fe8a2010"}: {}
      f:spec:
        f:replicas: {}
        f:selector: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:spec:
            f:containers:
              k:{"name":"app"}:
                .: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: kube-controller-manager
    operation: Update
    time: "$(time-offset-nanosecond -72765485559)"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:availableReplicas: {}
        f:fullyLabeledReplicas: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
    manager: kube-controller-manager
    operation: Update
    subresource: status
    time: "$(time-offset-nanosecond -71765485559)"
  name: app-67f9df97bd
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: Deployment
    name: app
    uid: edeaba94-a640-42f4-acc8-fc69fe8a2010
  uid: d59d4bb0-1d03-45b7-8385-8b0ef63524f3
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app
      pod-template-hash: 67f9df97bd
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: app
        pod-template-hash: 67f9df97bd
    spec:
      containers:
      - image: app
        imagePullPolicy: Always
        name: app
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 3
  fullyLabeledReplicas: 3
  observedGeneration: 1
  readyReplicas: 3
  replicas: 3
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:bootstrap-signer
  namespace: kube-public
  uid: 9cc9e4d0-a8d6-4ca2-a3a4-db17f20227c3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:controller:bootstrap-signer
subjects:
- kind: ServiceAccount
  name: bootstrap-signer
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system::extension-apiserver-authentication-reader
  namespace: kube-system
  uid: 7065f58a-8803-417f-b619-fb7216ee9cb1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-controller-manager
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-scheduler
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system::leader-locking-kube-controller-manager
  namespace: kube-system
  uid: b9258b51-2c3b-4cf3-8b3f-43a8741fff56
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system::leader-locking-kube-controller-manager
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-controller-manager
- kind: ServiceAccount
  name: kube-controller-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system::leader-locking-kube-scheduler
  namespace: kube-system
  uid: 1284fc40-94aa-4d1c-8da5-ba5f9709aee4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system::leader-locking-kube-scheduler
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:kube-scheduler
- kind: ServiceAccount
  name: kube-scheduler
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:bootstrap-signer
  namespace: kube-system
  uid: e4b5b3db-22eb-411f-91f2-1de2e03038e1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:controller:bootstrap-signer
subjects:
- kind: ServiceAccount
  name: bootstrap-signer
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:cloud-provider
  namespace: kube-system
  uid: 98d549c2-c823-4ea4-bd1a-ce3253abb622
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:controller:cloud-provider
subjects:
- kind: ServiceAccount
  name: cloud-provider
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:roleRef: {}
      f:subjects: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:token-cleaner
  namespace: kube-system
  uid: 3ce89a4e-1e4f-4456-869a-4538173dbf46
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:controller:token-cleaner
subjects:
- kind: ServiceAccount
  name: token-cleaner
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:bootstrap-signer
  namespace: kube-public
  uid: 15cdff20-20bb-44a8-b8c9-34ba487d4e6d
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - cluster-info
  resources:
  - configmaps
  verbs:
  - update
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: extension-apiserver-authentication-reader
  namespace: kube-system
  uid: 56ddb684-e559-40b9-8007-e75c37754c20
rules:
- apiGroups:
  - ""
  resourceNames:
  - extension-apiserver-authentication
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system::leader-locking-kube-controller-manager
  namespace: kube-system
  uid: cae101b8-3a43-409a-aa73-f6939bb606ac
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - watch
- apiGroups:
  - ""
  resourceNames:
  - kube-controller-manager
  resources:
  - configmaps
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system::leader-locking-kube-scheduler
  namespace: kube-system
  uid: 92ce40ca-9dbe-4133-90ef-fcabf22d592b
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - watch
- apiGroups:
  - ""
  resourceNames:
  - kube-scheduler
  resources:
  - configmaps
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:bootstrap-signer
  namespace: kube-system
  uid: 831c28a1-4b11-4fbc-b7f9-b709ffd93a75
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:cloud-provider
  namespace: kube-system
  uid: 88aef8a6-c036-4d46-820a-c4529ec1906e
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: "$(time-offset-nanosecond -74765485559)"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -74765485559)"
  name: system:controller:token-cleaner
  namespace: kube-system
  uid: 7c5e17ee-bd8c-4fd3-a394-0d2be8b83eb0
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  name: default
  namespace: default
  uid: a565169d-90ce-4f9d-8bd6-d8028e87e673
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  name: default
  namespace: kube-node-lease
  uid: 00dae837-cfa5-4478-9002-6fc6fd863bf3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  name: default
  namespace: kube-public
  uid: 88544e9a-175b-4832-884f-0cd7284151fe
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "$(time-offset-nanosecond -72765485559)"
  name: default
  namespace: kube-system
  uid: b8a95c02-5cf4-4c3a-b347-7f899b3af36a
---
apiVersion: v1
kind: Endpoints
metadata:
  creationTimestamp: "$(time-offset-nanosecond -73765485559)"
  labels:
    endpointslice.kubernetes.io/skip-mirror: "true"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:endpointslice.kubernetes.io/skip-mirror: {}
      f:subsets: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -73765485559)"
  name: kubernetes
  namespace: default
  uid: 223603e1-39ef-40dc-8d3d-c0fe65e2ce51
subsets:
- addresses:
  - ip: 172.26.0.3
  ports:
  - name: https
    port: 6443
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "$(time-offset-nanosecond -73765485559)"
  labels:
    component: apiserver
    provider: kubernetes
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:component: {}
          f:provider: {}
      f:spec:
        f:clusterIP: {}
        f:internalTrafficPolicy: {}
        f:ipFamilyPolicy: {}
        f:ports:
          .: {}
          k:{"port":443,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: kube-apiserver
    operation: Update
    time: "$(time-offset-nanosecond -73765485559)"
  name: kubernetes
  namespace: default
  uid: 40121224-0b73-4e6d-9d2f-104d4d12e75f
spec:
  clusterIP: 10.0.0.1
  clusterIPs:
  - 10.0.0.1
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 6443
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
